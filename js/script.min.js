const form = document.querySelectorAll("form"),
  inputs = document.querySelectorAll("input"),
  modalWindowWrapper = document.querySelector(".modal-window__wrapper"),
  modalMailText = document.querySelector(".modal-mail__text"),
  message = {
    loading: "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430...",
    success:
      "\u0421\u043F\u0430\u0441\u0438\u0431\u043E! \u0421\u043A\u043E\u0440\u043E \u043C\u044B \u0441 \u0432\u0430\u043C\u0438 \u0441\u0432\u044F\u0436\u0435\u043C\u0441\u044F",
    failure:
      "\u0427\u0442\u043E-\u0442\u043E \u043F\u043E\u0448\u043B\u043E \u043D\u0435 \u0442\u0430\u043A..."
  },
  postData = async (a, b) => {
    modalMailText.textContent = message.loading;
    let c = await fetch(a, { method: "POST", body: b });
    return await c.text();
  },
  clearInputs = () => {
    inputs.forEach((a) => {
      a.value = "";
    });
  };
form.forEach((a) => {
  a.addEventListener("submit", (b) => {
    b.preventDefault(), console.log();
    const c = document.querySelector(".modal-mail"),
      d = document.querySelector(".form__details");
    modalWindowWrapper.classList.remove("modal-window__wrapper_visible"),
      d.classList.remove("form__details-show"),
      (c.style.display = "flex"),
      (modalMailText.textContent = message.success);
    const e = new FormData(a);
    console.log(b.target.childNodes[5]),
      e.append("type", b.target.childNodes[5].childNodes[3].value),
      e.append("height", b.target.childNodes[5].childNodes[7].value),
      e.append("capacity", b.target.childNodes[5].childNodes[9].value),
      e.append("carrying", b.target.childNodes[5].childNodes[11].value),
      postData("send.php", e)
        .then((a) => {
          console.log(a), (modalMailText.textContent = message.success);
        })
        .catch((a) => {
          (modalMailText.textContent = message.failure), console.log(a);
        })
        .finally(() => {
          clearInputs(),
            setTimeout(() => {
              c.style.display = "none";
            }, 2e3),
            (document.body.style.overflow = "scroll");
        });
  });
});
const modalWindow = document.querySelector(".modal-window__wrapper"),
  btnOpenModalWindowDetails = document.querySelectorAll(".car-park-item__btn"),
  formDelails = document.querySelector(".form__details");
btnOpenModalWindowDetails.forEach((a) => {
  a.addEventListener("click", (a) => {
    const b = a.target;
    modalWindow.classList.add("modal-window__wrapper_visible"),
      modalWindow.classList.add("modal-details"),
      (document.body.style.overflow = "hidden"),
      formDelails.classList.add("form__details-show");
    const c = document.querySelector('input[name="type"]'),
      d = document.querySelector('input[name="height"]'),
      e = document.querySelector('input[name="capacity"]'),
      f = document.querySelector('input[name="carrying"]');
    (c.value = `${b.previousElementSibling.previousElementSibling.textContent}`),
      (d.value = `${b.previousElementSibling.children[1].textContent.trim()}`),
      (e.value = `${b.previousElementSibling.children[2].textContent.trim()}`),
      (f.value = `${b.previousElementSibling.children[3].textContent.trim()}`);
  });
});
function openPoppup(a, b) {
  const c = document.querySelectorAll(a),
    d = document.querySelector(b);
  c.forEach((a) => {
    a.addEventListener("click", () => {
      d.classList.add("modal-window__wrapper_visible"),
        (document.body.style.overflow = "hidden");
    });
  }),
    d.addEventListener("click", (a) => {
      const b = a.target;
      (b.closest(".modal-window__close") ||
        !b.closest(".modal-window__inner")) &&
        (d.classList.remove("modal-window__wrapper_visible"),
        formDelails.classList.remove("form__details-show"),
        (document.body.style.overflow = "scroll"));
    });
}
openPoppup(".modal-open-btn", ".modal-window__wrapper");
function openMenu(a, b, c, d) {
  const e = document.querySelector(a),
    f = document.querySelector(b),
    g = document.querySelector(c),
    h = document.querySelector(d);
  e.addEventListener("click", (a) => {
    a.target && a.preventDefault();
    const b = a.target;
    b.closest(".burger") && e.classList.toggle("burger-active"),
      b.closest(".burger-active")
        ? ((f.style.height = "100vh"), (g.style.transform = "translateY(0)"))
        : ((f.style.height = ""), (g.style.transform = ""));
  }),
    f.addEventListener("click", (a) => {
      (!a.target.closest(".burger-active") || a.target.closest(h)) &&
        (e.classList.remove("burger-active"),
        (f.style.height = ""),
        (g.style.transform = ""));
    });
}
openMenu(".burger", ".menu", ".menu__list", ".menu__link");
function getSwiper() {
  new Swiper(".car-park-item_visible", {
    init: !0,
    speed: 400,
    spaceBetween: 100,
    navigation: {
      nextEl: ".car-park__item-next",
      prevEl: ".car-park__item-prev"
    },
    pagination: {
      el: ".slider-pagination",
      bulletClass: "slider-pagination__bullet",
      bulletActiveClass: "slider-pagination__bullet-active",
      clickable: !0
    }
  });
}
getSwiper();
const tabs = document.querySelectorAll(".car-park__tab"),
  tabsContent = document.querySelectorAll(".swiper-container-card");
for (let a = 0; a < tabs.length; a++)
  tabs[a].addEventListener("click", (a) => {
    tabs.forEach((a) => {
      a.classList.remove("car-park__tab_active");
    }),
      a.preventDefault();
    const b = a.target;
    b.classList.contains("car-park__tab_active") ||
      (b.classList.add("car-park__tab_active"),
      tabsContent.forEach((a) => {
        a.classList.remove("car-park-item_visible"),
          a.dataset.id === b.dataset.id &&
            (a.classList.add("car-park-item_visible"), getSwiper());
      }));
  });
const showAllCard = document.querySelector(".price-content__show-all"),
  cardPrice = document.querySelectorAll(".price-item"),
  priceContent = document.querySelector(".price__content");
showAllCard.addEventListener("click", (a) => {
  a.preventDefault(),
    showAllCard.classList.contains("card-show")
      ? cardPrice.forEach((a) => {
          a.classList.remove("price-item-show"),
            (priceContent.style.gridRowGap = ""),
            showAllCard.classList.remove("card-show"),
            (showAllCard.textContent =
              "\u0412\u0441\u0435 \u0446\u0435\u043D\u044B");
        })
      : cardPrice.forEach((a) => {
          a.classList.add("price-item-show"),
            (priceContent.style.gridRowGap = "30px"),
            showAllCard.classList.add("card-show"),
            (showAllCard.textContent = "\u0421\u043A\u0440\u044B\u0442\u044C");
        });
});
const addReviewsMore = document.querySelector(".reviews__more"),
  reviewsItems = document.querySelectorAll(".reviews-item");
function changeSizeWindow() {
  if (((clientWidth = document.documentElement.clientWidth), 800 > clientWidth))
    for (let a = 1; a < reviewsItems.length; a++)
      reviewsItems[a].classList.add("reviews-item-hidden"),
        reviewsItems[a].classList.remove("reviews-item-visible");
}
changeSizeWindow(),
  window.addEventListener("resize", changeSizeWindow, !1),
  window.removeEventListener("resize", changeSizeWindow, !1),
  addReviewsMore.addEventListener("click", (a) => {
    a.preventDefault(),
      reviewsItems.forEach((a) => {
        a.classList.contains("reviews-item-hidden")
          ? (a.classList.remove("reviews-item-hidden"),
            (addReviewsMore.textContent =
              "\u0421\u043A\u0440\u044B\u0442\u044C"),
            (addReviewsMore.style.textAlight = "center"))
          : !a.classList.contains("reviews-item-hidden") &&
            !a.classList.contains("reviews-item-visible") &&
            (a.classList.add("reviews-item-hidden"),
            (addReviewsMore.textContent =
              "\u0412\u0441\u0435 \u043E\u0442\u0437\u044B\u0432\u044B"));
      });
  });
const textBlock = document.querySelectorAll(".reviews-item__text-block"),
  text = document.querySelectorAll(".reviews-item__text"),
  btn = document.querySelectorAll(".reviews-item__text-more");
text.forEach((a, b) => {
  const c = a.textContent.slice(0, 350);
  if (
    ((text[b].style.bottom = `calc(-${text[b].clientHeight}px *1.2)`),
    (text[b].style.position = "absolute"),
    textBlock[b].insertAdjacentHTML(
      "afterbegin",
      `<p class="reviews-item__text-cut">${c}</p>`
    ),
    350 > a.textContent.length)
  )
    (btn[b].style.display = "none"), (a.style.margin = "0");
  else {
    const a = document.querySelectorAll(".reviews-item__text-cut");
    a[b].textContent += "...";
  }
}),
  btn.forEach((a, b) => {
    const c = document.querySelectorAll(".reviews-item__text-cut");
    "none" !== a.style.display &&
      a.addEventListener("click", (d) => {
        d.preventDefault(),
          a.classList.contains("show")
            ? (a.classList.remove("show"),
              (a.textContent =
                "\u0427\u0438\u0442\u0430\u0442\u044C \u043F\u043E\u043B\u043D\u043E\u0441\u0442\u044C\u044E"),
              (c[b].style.position = "relative"),
              (c[b].style.top = "0"),
              (text[b].style.bottom = `-${text[b].clientHeight}px`),
              (text[b].style.position = "absolute"))
            : (a.classList.add("show"),
              (a.textContent = "\u0421\u043A\u0440\u044B\u0442\u044C"),
              (c[b].style.position = "absolute"),
              (c[b].style.top = `-${c[b].clientHeight}px`),
              (c[b].style.transition = "all 0.3s ease-in-out"),
              (text[b].style.bottom = "0"),
              (text[b].style.position = "relative"),
              (text[b].style.transition = "all 0.3s ease-in-out"));
      });
  });
const overlay = document.querySelector(".overlay"),
  map = document.querySelector(".map");
overlay.addEventListener("click", () => {
  "none" !== overlay.style.pointerEvents &&
    (overlay.style.pointerEvents = "none");
}),
  map.addEventListener("mouseleave", () => {
    overlay.style.pointerEvents = "";
  }),
  map.addEventListener("touchmove", () => {
    overlay.style.pointerEvents = "";
  }),
  new Cleave(".feedback-form__input-phone", {
    phone: !0,
    phoneRegionCode: "ru"
  }),
  new Cleave(".feedback-form__input-phone-modal", {
    phone: !0,
    phoneRegionCode: "ru"
  });
const btnToTop = document.querySelector(".toTop");
window.addEventListener("scroll", () => {
  btnToTop.style.display = 480 < window.scrollY ? "inline-block" : "none";
});
function moveToTop(a) {
  const b = document.querySelectorAll(a);
  for (let c of b)
    c.addEventListener("click", function (a) {
      a.preventDefault();
      const b = c.dataset.target;
      document
        .querySelector(b)
        .scrollIntoView({ behavior: "smooth", block: "start" });
    });
}
moveToTop(".toTop"), moveToTop(".menu__link");
